import google.generativeai as genai
import json
import sys
from api import value  # Assuming API key is stored securely in a separate file

# Configure the Google Gemini API
genai.configure(api_key=value)

# Model generation configuration
generation_config = {
    "temperature": 0.7,  # Adjust the temperature for more conversational responses
    "top_p": 0.9,
    "top_k": 75,
    "max_output_tokens": 150,
    "response_mime_type": "text/plain",
}

# Initialize the Gemini AI model
model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config
)

# Start chat session
chat_session = model.start_chat(history=[])

def create_system_prompt(user_question):
    """Generate a system prompt to guide the AI in providing a helpful answer to the userâ€™s question."""
    return f"""
    You are a helpful assistant powered by Google Gemini.

    The user will ask a question, and your task is to respond clearly and concisely.

    User Question: "{user_question}"

    Provide a natural language answer based on the best of your knowledge. 
    Make sure the answer is accurate, clear, and informative.
    Do not include any unnecessary details.
    """

def process_user_question(user_question):
    """Send user question to Gemini AI to get a helpful response."""
    system_prompt = create_system_prompt(user_question)
    response = chat_session.send_message(system_prompt)
    answer = response.text.strip()

    # Return the answer generated by AI
    return answer

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Error: No question provided. Please provide a question as an argument.")
        sys.exit(1)  # Exit the program with an error code
    
    user_question = sys.argv[1]  # Get the user question from the command line
    answer = process_user_question(user_question)
    print(answer)  # Print the answer generated by the AI for the user to see
